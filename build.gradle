plugins {
    id 'java-library'
    id "idea"
    id 'jacoco'
    id "com.adarshr.test-logger" version "4.0.0"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'ru.vyarus.java-lib' version '3.0.0'
    id 'ru.vyarus.github-info' version '2.0.0'
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'net.researchgate.release' version '3.1.0'
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    if (isBuildSnapshot) {
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    }
}

sourceCompatibility = 21
targetCompatibility = 21

group "io.kestra.plugin"
description 'Harness Google Workspace APIs within Kestra data orchestration.'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

dependencies {
    // Platform
    annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    implementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    api enforcedPlatform("io.kestra:platform:$kestraVersion")

    // Lombok
    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"

    // Kestra
    annotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
    compileOnly group: "io.kestra", name: "core", version: kestraVersion

    // Google libraries are managed by the the Kestra Platform so they are aligned on all plugins
    api platform('com.google.cloud:libraries-bom')
    api 'com.google.api-client:google-api-client:2.7.1'
    api 'com.google.auth:google-auth-library-oauth2-http:1.30.1'
    api 'com.google.apis:google-api-services-drive:v3-rev20241206-2.0.0'
    api 'com.google.apis:google-api-services-sheets:v4-rev20241203-2.0.0'
    api 'com.google.apis:google-api-services-calendar:v3-rev20241101-2.0.0'

    // Logs
    compileOnly'org.slf4j:slf4j-api'

    // For Parquet and Avro parsing
    api('org.apache.parquet:parquet-avro:1.15.0')
    api('org.apache.parquet:parquet-hadoop:1.15.0')

    // For ORC parsing
    api('org.apache.orc:orc-core:1.8.7')
    api('org.apache.orc:orc-mapreduce:1.8.7')

    // Additional libraries for Parquet, Avro, ORC parsers
    api('org.apache.hadoop:hadoop-hdfs-client:3.4.1') {
        exclude group: 'com.fasterxml.jackson.core'
    }
    api('org.apache.hadoop:hadoop-common:3.4.1') {
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'org.apache.zookeeper'
    }
    api('org.apache.hadoop:hadoop-mapreduce-client-core:3.4.1') {
        exclude group: 'com.fasterxml.jackson.core'
    }

    compileOnly 'com.fasterxml.jackson.core:jackson-databind'

    // For CSV parsing
    api('org.apache.commons:commons-csv:1.12.0')
}


/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    useJUnitPlatform()
}

testlogger {
    theme "mocha-parallel"
    showExceptions true
    showFullStackTraces true
    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams true
}

dependencies {
    // Platform
    testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly 'org.projectlombok:lombok'

    // micronaut
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-jackson-databind"
    testImplementation "io.micronaut.reactor:micronaut-reactor"

    testAnnotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
    testImplementation group: "io.kestra", name: "core", version: kestraVersion
    testImplementation group: "io.kestra", name: "tests", version: kestraVersion
    testImplementation group: "io.kestra", name: "runner-memory", version: kestraVersion
    testImplementation group: "io.kestra", name: "storage-local", version: kestraVersion

    // test
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.hamcrest:hamcrest-library"
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
dependencies {
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation "io.qameta.allure:allure-junit5"
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.22.1"
}

test {
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
nexusPublishing {
    repositoryDescription = "${project.group}:${rootProject.name}:${project.version}"
    useStaging = !isBuildSnapshot
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    // Suppression this validation error as we want to enforce the Kestra platform
    suppressedValidationErrors.add('enforced-platform')
}

jar {
    manifest {
        attributes(
                "X-Kestra-Name": project.name,
                "X-Kestra-Title": "Google Workspace",
                "X-Kestra-Group": project.group + ".googleworkspace",
                "X-Kestra-Description": project.description,
                "X-Kestra-Version": project.version
        )
    }
}

maven.pom {
    developers {
        developer {
            id = "tchiotludo"
            name = "Ludovic Dehon"
        }
    }
}

shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
}

github {
    user 'kestra-io'
    license 'Apache'
}

/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('master')
    }

    // Dynamically set properties with default values
    failOnSnapshotDependencies = (project.hasProperty('release.failOnSnapshotDependencies')
            ? project.property('release.failOnSnapshotDependencies').toBoolean()
            : true)
    pushReleaseVersionBranch = (project.hasProperty('release.pushReleaseVersionBranch')
            ? project.property('release.pushReleaseVersionBranch').toString()
            : null)
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
